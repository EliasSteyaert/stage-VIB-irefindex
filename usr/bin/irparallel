#!/bin/bash

# Copyright (C) 2011, 2012 Ian Donaldson <ian.donaldson@biotek.uio.no>
# Original author: Paul Boddie <paul.boddie@biotek.uio.no>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

# My interpreter
USE_PYTHON_INTERPRETER=${python_interpreter:-/usr/bin/python3}
current_time=$(date +"%H:%M:%S")

if [ -e "irdata-config" ]; then
    . "$PWD/irdata-config"
elif [ -e "scripts/irdata-config" ]; then
    . 'scripts/irdata-config'
else
    . 'irdata-config'
fi

if [ "$1" = '--help' ]; then
    cat 1>&2 <<EOF
Take a list of items read from standard input and process them in parallel.

To reliably list files use "/bin/ls -1" rather than just "ls", since the latter
may have been defined as an alias and add things like colouring codes, causing
"noise" in the listing.

For a command, use a quoted shell argument containing {} to indicate the input
filename.

An example of a parsing pipeline (taking source names as input):

$PROGNAME 'irparse-source {}'
EOF
    exit 1
fi


COMMAND=$1
# Log the value of $1   
echo "irparallel: \$1 is $1" 1>&2
# Log the value of $1
echo "\$COMMAND is $COMMAND; current time: $current_time" > /home/irefindex/logfile2.log
echo "irparallel: \$1 is $1; current time: $current_time" >> /home/irefindex/logfile2.log

# Make sure that certain arguments are defined.
if [ ! "$COMMAND" ]; then
    echo "$PROGNAME: Please specify a command to run on each file (to be given as {})." 1>&2
    exit 1
fi


EXPLODED=($COMMAND)
EXENAME=$(echo ${EXPLODED[0]} | sed 's/\"//g')
if [[ $(basename $EXENAME .py) == $(basename $EXENAME) ]]; then 
    COMMAND2="$COMMAND"
else
    REST="\"$(echo ${EXPLODED[@]:1} | sed 's/\"//g')\"";
    COMMAND2="$USE_PYTHON_INTERPRETER ${EXPLODED[0]} $REST"
fi
echo "\$REST is $REST" >> /home/irefindex/logfile2.log

echo "$(basename $EXENAME .py)" >> /home/irefindex/logfile2.log
echo "$EXENAME" >> /home/irefindex/logfile2.log

# Extract the first part of the COMMAND
#FIRST_PART=$(echo "$COMMAND" | awk '{print $1}' | tr -d '"')
# Check if the first part ends in .py
#if [[ "$FIRST_PART" == *.py ]]; then
    # Prepend Python interpreter to the command
#    COMMAND2="$USE_PYTHON_INTERPRETER $COMMAND"
#fi
#else
    # Assign the command to COMMAND2 if it's not a Python script
#    COMMAND2="$COMMAND"
#fi

echo "The value of command2 after checking if it ends at .py: : $COMMAND2 ; current time: $current_time" >> /home/irefindex/logfile2.log

# The pipeline.
xargs -P $PROCESSES $XARGS_I'{}' sh -c "$COMMAND2"

echo "The end of the irparallel script" >> /home/irefindex/logfile2.log
