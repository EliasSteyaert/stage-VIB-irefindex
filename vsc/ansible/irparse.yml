---
- name: Irparse
  hosts: all
  gather_facts: true # WE NEED THIS HERE FOR THE DATES FOR THE LOGS!
  become: true
  vars_files:
    - ./vars/logs.yml
    - ./vars/sources.yml
    - ./vars/general.yml

  vars:
    log_location: "{{ logs_dir }}/irparse"
    USE_PYTHON_INTERPRETER: "{{ python_interpreter | default('/usr/bin/python3') }}"

  tasks:    
    - name: Set permissions on Ansible temporary directory
      ansible.builtin.file:
        path: "{{ home_dir }}/.ansible/tmp/"
        state: directory
        mode: "0755"
        recurse: yes
      become: yes

    - name: Install python3-venv package
      ansible.builtin.apt:
        name: python3-venv
        state: present

    - name: Create virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv "{{ download_data }}/{{ data2 }}/virtualenv"

    - name: Install irdata module
      pip:
        name: irdata
        executable: "{{ download_data }}/{{ data2 }}/virtualenv/bin/pip"
      become: true
      
    - name: Find files containing "TOOLS"
      find:
        paths: /home/irefindex/usr/bin/
        patterns: "*"
        recurse: yes
      register: found_files

   # - name: Iterate over found files
   #   vars:
   #     use_python_interpreter: "{{ USE_PYTHON_INTERPRETER }}"
   #   ansible.builtin.shell: |
   #     for filename in {{ found_files.files | map(attribute='path') | join(' ') }}; do sed "s|\(\$TOOLS/.*.py\)|{{ use_python_interpreter }}\" \"\1|g" "{{ filename }}" > "{{ filename }}.tmp" && mv "{{ filename }}.tmp" "{{ filename }}"; done
   #   args:
   #     executable: /bin/bash
   #   when: found_files.matched > 0    

    - name: Find .sh and .py files
      find:
        paths: /home/irefindex/usr/bin
        patterns: "*.sh,*.py"
      register: files_to_update

    - name: Give execute permissions to .sh and .py files
      file:
        path: "{{ item.path }}"
        mode: u+x,g+x,o+x
      loop: "{{ files_to_update.files }}"

    - name: Convert the downloaded data to files for each source
      ansible.builtin.command: "./irparse {{ item.name | upper }}"
      args:
        chdir: "/home/irefindex/usr/bin"
      environment:
        python_interpreter: "{{ download_data }}/{{ data2 }}/virtualenv/bin/python3"
      changed_when: false
      poll: 0
      async: "{{ item.parse_async | default(60) }}"
      register: job_result
      loop: "{{ jobs }}"

    - name: Wait for all jobs to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      environment:
        python_interpreter: "{{ download_data }}/{{ data2 }}/virtualenv/bin/python3"
      register: job_result
      until: job_result.finished
      ignore_errors: true
      retries: "{{ item.item.parse_retries | default(12) }}"
      delay: "{{ item.item.parse_delay | default(5) }}"
      loop: "{{ job_result.results }}"
      become: yes
        
    - name: Debug job_result
      ansible.builtin.debug:
        var: job_result

    - name: df -h
      ansible.builtin.command: "df -h"  
      register: disk_space
        
    - name: "Ensure that `log_location` exists"
      ansible.builtin.file:
        path: "{{ log_location }}"
        state: directory
        mode: "0755"

    - name: Copy msg
      ansible.builtin.copy:
        content: "{{ item.msg }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.msg"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.msg is defined and item.msg != ""
      loop: "{{ job_result.results }}"

    - name: Copy logs
      ansible.builtin.copy:
        content: "{{ item.stdout }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.out"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stdout != ""
      loop: "{{ job_result.results }}"
      ignore_errors: true

    - name: Copy error logs
      ansible.builtin.copy:
        content: "{{ item.stderr }}"
        dest: "{{ log_location }}/{{ item.item.item.name }}.err"
        mode: "0644"
        remote_src: false
      no_log: true
      when: item.stderr != ""
      loop: "{{ job_result.results }}"

    - name: Gather failed jobs
      ansible.builtin.set_fact:
        failed_parsing_jobs: "{{ failed_parsing_jobs | default([]) + [item.item.item.name] }}"
      no_log: true
      when: item.failed
      loop: "{{ job_result.results }}"

    - name: Print failed jobs
      ansible.builtin.fail:
        msg:
          - "The following resources failed to parse: {{ failed_parsing_jobs | join(', ') }}"
          - "Please check the logs in `{{ log_location }}` for more information."
      when: failed_parsing_jobs is defined
